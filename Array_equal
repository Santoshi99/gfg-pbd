Sum of N terms which are odd: N*N. For example, 1, 3, 5 = 9. 

Now, to minimise the operations we will always  try to reach at the centre. For example, 1, 3, 5, 7 = 4, 4, 4, 4. 

So, we know that sum of a[0] + a[n-1] = a[1] + a[n-2] 

Now, as we have to solve the problem in O(1), so let's start making a formula. 

Let us analyse this test case. For example, 1, 3, 5, 7. 

let us write it in variable terms. a[0], a[1], a[2], a[3]. 

Now, how can we make them equal to x = 4. as, mentioned above. 

ans = (4-1) + (4-3) = 4. How?. Just try run examples for multiple test cases, so ans = (N-a[0]) + (N-a[1]) ==> 2*N - (a[0]+a[1])

So, as discussed sum of odd numbers. is square of their count. 

Now, just look at the code. 

    long long int minOperations(int N) {
        // Code here
        if(N == 1) return 1;
        
        long long int cn = N;
        long long int hn = N/2;
        
        long long int res = hn*cn - hn*hn;
        return res;
    }
